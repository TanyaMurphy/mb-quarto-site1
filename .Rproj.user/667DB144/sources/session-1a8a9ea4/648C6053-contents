#' myseries UI Function
#'
#' @description A shiny Module.
#' Check if materialized view, myseries, is found by printing a view rows where series name includes 'billboard'.
#'
#' @param id,input,output,session Internal parameters for {shiny}.
#'
#' @noRd
#'
#' @importFrom shiny NS tagList
mod_myseries_ui <- function(id) {
  ns <- NS(id)
  bslib::card(
    bslib::card_header("Popular and Critical Acclaim Lists (series)"),
    DT::dataTableOutput(ns("myseries_table"))
  )
}

#' myseries Server Functions
#'
#' @noRd
mod_myseries_server <- function(id, conn){
  moduleServer(id, function(input, output, session){
    ns <- session$ns

    # ---- Database Query and Data Table Output ----
    output$myseries_table <- DT::renderDataTable({
      if (is.null(conn())) {
        return(NULL)
      }
      dbGetQuery(
        conn(), "
        SELECT * FROM myseries
            where (series_name LIKE '%Billboard%' or series_name LIKE '%Juno%' or series_name LIKE '%Grammy%'
                or series_name LIKE '%Rolling Stone%'or series_comment LIKE '%SPIN magazine%' or series_name LIKE '%Academy Awards%'
                or series_name LIKE '%Roll Hall of Fame%' or series_name LIKE 'Brit Award%') AND NOT entity_type = 'event'
            order by entity_type, series_name;
        "
      )
    },
    options = list(
      pageLength = 20,
      autoWidth = TRUE,
      lengthMenu = c(20, 40, 60, 800),
      columnDefs = list(list(className = 'dt-center', targets = "_all"))
    ))
  })
}

## To be copied in the UI
# mod_myseries_ui("myseries_1")

## To be copied in the server
# mod_myseries_server("myseries_1")

myseries_demo <- function() {
  ui <- fluidPage(
    mod_myseries_ui("myseries_demo")
  )

  server <- function(input, output, session) {
    # Store the actual connection object (not reactive)
    conn <- NULL

    # Create connection reactively
    conn_r <- reactive({
      if (is.null(conn)) {
        conn <<- DBI::dbConnect(
          RPostgres::Postgres(),
          dbname = "mbdump",
          host = "localhost",
          port = 5432,
          user = Sys.getenv("POSTGRES_USER"),
          password = Sys.getenv("POSTGRES_PASSWORD")
        )
      }
      conn
    })

    # Disconnect when session ends (using the stored connection object)
    session$onSessionEnded(function() {
      if (!is.null(conn)) {
        DBI::dbDisconnect(conn)
      }
    })

    mod_myseries_server("myseries_demo", conn = conn_r)
  }

  shinyApp(ui, server)
}
